{"version":3,"sources":["store/types/alertTypes.ts","store/actions/alertActions.ts","store/types/weatherTypes.ts","store/actions/weatherActions.ts","components/Search.tsx","components/Weather.tsx","components/Alert.tsx","App.tsx","store/redusers/weatherReducer.ts","store/redusers/alertReducer.ts","store/index.ts","index.tsx"],"names":["AlertActionTypes","WeatherActionTypes","setAlert","message","type","SET_ALERT","payload","Search","title","useState","city","setCity","dispatch","useDispatch","className","onSubmit","e","preventDefault","trim","SET_LOADING","a","fetch","process","response","ok","json","responseDate","Error","toUpperCase","GET_WEATHER","SET_ERROR","getWeather","placeholder","style","maxWidth","value","onChange","currentTarget","margin","Weather","data","fahrengeit","main","temp","toFixed","celsius","marginBottom","name","sys","country","alignItems","weather","description","src","icon","alt","humidity","pressure","wind","speed","Alert","onClose","onClick","justifyContent","App","weatherData","useSelector","state","weatherReducer","loading","error","alertMsg","alertReducer","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00e93377.chunk.js","sourcesContent":["export enum AlertActionTypes {\r\n    SET_ALERT = 'SET_ALERT'\r\n}\r\n\r\nexport interface AlertAction {\r\n    type:AlertActionTypes.SET_ALERT,\r\n    payload:string,\r\n}\r\n\r\nexport interface AlertState {\r\n    message:string\r\n}\r\n","import {AlertAction, AlertActionTypes} from \"../types/alertTypes\";\r\n\r\nexport const setAlert = (message:string):AlertAction =>{\r\n    return {\r\n        type:AlertActionTypes.SET_ALERT,\r\n        payload:message\r\n    }\r\n}","export enum WeatherActionTypes {\r\n    GET_WEATHER = 'GET_WEATHER',\r\n    SET_LOADING = 'SET_LOADING',\r\n    SET_ERROR = 'SET_ERROR',\r\n}\r\n\r\nexport interface Weather{\r\n    description:string,\r\n    icon:string,\r\n    id:number,\r\n    main:string\r\n}\r\n\r\nexport interface WeatherData {\r\n    base:string,\r\n    clouds:{\r\n        all:number,\r\n    }\r\n    cod:number,\r\n    coord:{\r\n        lon:number,\r\n        lat:number,\r\n    }\r\n    dt:number,\r\n    id:number,\r\n    main:{\r\n        temp:number,\r\n        feels_like:number,\r\n        humidity:number,\r\n        pressure:number,\r\n        temp_max:number,\r\n        temp_min:number\r\n    },\r\n    name:string,\r\n    sys:{\r\n        country:string,\r\n        id:number,\r\n        sunrise:number,\r\n        sunset:number,\r\n        type:number,\r\n    },\r\n    timezone:number,\r\n    visibility:number,\r\n    weather:Weather[],\r\n    wind:{\r\n        speed:number,\r\n        deg:number,\r\n    }\r\n}\r\n\r\nexport interface WeatherError {\r\n    cod:string,\r\n    message:string,\r\n}\r\n\r\nexport interface WeatherState {\r\n    data:WeatherData | null,\r\n    loading:boolean,\r\n    error:string,\r\n}\r\n\r\ninterface GetWeatherAction {\r\n    type:WeatherActionTypes.GET_WEATHER,\r\n    payload:WeatherData\r\n}\r\n\r\ninterface SetLoadingAction {\r\n    type:WeatherActionTypes.SET_LOADING\r\n}\r\n\r\ninterface SetErrorAction {\r\n    type:WeatherActionTypes.SET_ERROR,\r\n    payload:string,\r\n}\r\n\r\nexport type WeatherAction = GetWeatherAction | SetErrorAction | SetLoadingAction\r\n\r\n\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {RootState} from \"../index\";\r\nimport {WeatherAction, WeatherActionTypes, WeatherData, WeatherError,} from \"../types/weatherTypes\";\r\n\r\n\r\nexport const getWeather = (city:string):ThunkAction<void,RootState,null,WeatherAction> =>{\r\n    return async dispatch =>{\r\n        try {\r\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}`);\r\n            if (!response.ok){\r\n                const responseDate:WeatherError = await response.json()\r\n                throw new Error(responseDate.message.toUpperCase())\r\n            }\r\n\r\n            const responseDate:WeatherData = await response.json()\r\n            dispatch({\r\n                type:WeatherActionTypes.GET_WEATHER,\r\n                payload:responseDate\r\n            })\r\n        }catch (e) {\r\n            dispatch({\r\n                type:WeatherActionTypes.SET_ERROR,\r\n                payload:e.message\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const setLoading = ():WeatherAction =>{\r\n    return {\r\n        type:WeatherActionTypes.SET_LOADING\r\n    }\r\n}\r\n\r\nexport const setError = ():WeatherAction => {\r\n    return {\r\n        type:WeatherActionTypes.SET_ERROR,\r\n        payload:''\r\n    }\r\n}","import React, {FormEvent, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAlert} from \"../store/actions/alertActions\";\r\nimport {getWeather, setLoading} from \"../store/actions/weatherActions\";\r\n\r\ninterface SearchProps {\r\n    title: string\r\n}\r\n\r\nconst Search: React.FC<SearchProps> = ({title}) => {\r\n\r\n    const [city,setCity] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const changeHandler = (e:FormEvent<HTMLInputElement>) =>{\r\n        setCity(e.currentTarget.value)\r\n    }\r\n\r\n    const submitHandler = (e:FormEvent<HTMLFormElement>) =>{\r\n        e.preventDefault()\r\n        if (city.trim() === ''){\r\n            return dispatch(setAlert('City is required'))\r\n        }\r\n\r\n        dispatch(setLoading())\r\n        dispatch(getWeather(city))\r\n        setCity('')\r\n    }\r\n\r\n    return (\r\n        <div className=\"hero is-light has-text-centered\">\r\n            <div className=\"hero-body\">\r\n                <div className=\"container\">\r\n                    <h1 className='title'>{title}</h1>\r\n                    <form className=\"py-5\" onSubmit={submitHandler}>\r\n                        <input type=\"text\"\r\n                               className=\"input has-text-centered mb-2\"\r\n                               placeholder='Enter city name'\r\n                               style={{maxWidth:300}}\r\n                               value={city}\r\n                               onChange={changeHandler}\r\n                        />\r\n                        <button className=\"button is-primary is-fullwidth \" style={{maxWidth:300,margin:'0 auto'}}>Search</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport {WeatherData} from \"../store/types/weatherTypes\";\r\n\r\ninterface WeatherProps {\r\n    data:WeatherData\r\n}\r\n\r\nconst Weather:React.FC<WeatherProps> = ({data}) => {\r\n\r\n    const fahrengeit = (data.main.temp * 1.8 - 459.67).toFixed(2)\r\n    const celsius = (data.main.temp - 273.15).toFixed(2)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <section className=\"section\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"title has-text-centered\" style={{marginBottom:50}}>\r\n                        {data.name} - {data.sys.country}\r\n                    </h1>\r\n                    <div className=\"level\" style={{alignItems:'flex-start'}}>\r\n                        <div className=\"level-item has-text-centered\">\r\n                                <div>\r\n                                    <p className=\"subtitle is-3 mb-6\">{data.weather[0].description}</p>\r\n                                    <p className=\"title image is-128x128\"><img className=\"is-rounded\" src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`} alt=\"\"/></p>\r\n                                </div>\r\n                        </div>\r\n                        <div className=\"level-item has-text-centered\">\r\n                            <div>\r\n                                <p className=\"subtitle is-3 mb-6\">Temp</p>\r\n                                    <div className=\"title\">\r\n                                        <p className=\"mb-2\">{data.main.temp}K</p>\r\n                                        <p className=\"mb-2\">{fahrengeit}<sup>&#8457;</sup></p>\r\n                                        <p>{celsius} <sup>&#8451;</sup></p>\r\n                                    </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"level-item has-text-centered\">\r\n                            <div>\r\n                                <p className=\"subtitle is-3 mb-6\">Humidity</p>\r\n                                <p className='title'>{data.main.humidity}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"level-item has-text-centered\">\r\n                            <div>\r\n                                <p className=\"subtitle is-3 mb-6\">Pressure</p>\r\n                                <p className=\"title\">{data.main.pressure}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"level-item has-text-centered\">\r\n                           <div>\r\n                               <p className=\"subtitle is-3 mb-6\">Wind</p>\r\n                               <p className=\"title\">{data.wind.speed} m/s</p>\r\n                           </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\n\r\ninterface AlertProps {\r\n    message:string,\r\n    onClose:()=>void\r\n}\r\n\r\nconst Alert:React.FC<AlertProps> = ({message,onClose}) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"modal is-active has-text-centered\">\r\n            <div className=\"modal-background\" onClick={onClose}></div>\r\n            <div className=\"modal-card\">\r\n                <header className=\"modal-card-head has-background-info\">\r\n                    <p className=\"modal-card-title has-text-white\">{message}</p>\r\n                </header>\r\n                <footer className=\"modal-card-foot\" style={{justifyContent:'center'}}>\r\n                    <button className=\"button has-background-link-light\" onClick={onClose}>Close</button>\r\n                </footer>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Alert;\r\n","import React from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"./store\";\nimport Search from \"./components/Search\";\nimport Weather from \"./components/Weather\";\nimport Alert from \"./components/Alert\";\nimport {setAlert} from \"./store/actions/alertActions\";\nimport {setError} from \"./store/actions/weatherActions\";\n\n\nconst App:React.FC = () => {\n\n  const dispatch = useDispatch()\n  const weatherData = useSelector((state:RootState) => state.weatherReducer.data)\n  const loading = useSelector((state:RootState) => state.weatherReducer.loading)\n  const error = useSelector((state:RootState) => state.weatherReducer.error)\n  const alertMsg = useSelector((state:RootState) => state.alertReducer.message)\n\n  return (\n    <div className=\"has-text-centered\">\n      <Search title=\"Enter city name and press search button\" />\n      {loading ? <h2 className=\"is-size-3 py-2\">Loading...</h2> : weatherData && <Weather data={weatherData}/>}\n\n      {alertMsg && <Alert message={alertMsg} onClose={()=>dispatch(setAlert(''))}/>}\n      {error && <Alert message={error} onClose={()=> dispatch(setError())}/>}\n    </div>\n  );\n}\n\nexport default App;\n","import {WeatherAction, WeatherState,WeatherActionTypes} from \"../types/weatherTypes\";\r\n\r\nconst initialState: WeatherState = {\r\n    data: null,\r\n    loading: false,\r\n    error: ''\r\n}\r\n\r\nexport const weatherReducer = (state = initialState, action: WeatherAction):WeatherState => {\r\n    switch (action.type) {\r\n        case WeatherActionTypes.GET_WEATHER:\r\n            return {data: action.payload, loading: false, error: ''}\r\n        case WeatherActionTypes.SET_LOADING:\r\n            return {...state,loading:true};\r\n        case WeatherActionTypes.SET_ERROR:\r\n            return {...state,error:action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}","import {AlertAction, AlertState,AlertActionTypes} from \"../types/alertTypes\";\r\n\r\nconst initialState:AlertState = {\r\n    message:''\r\n}\r\n\r\nexport const alertReducer = (state = initialState, action:AlertAction):AlertState =>{\r\n    switch (action.type) {\r\n        case AlertActionTypes.SET_ALERT:\r\n            return {message:action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}","import {createStore,combineReducers,applyMiddleware} from 'redux'\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport {weatherReducer} from \"./redusers/weatherReducer\";\r\nimport {alertReducer} from \"./redusers/alertReducer\";\r\n\r\nconst rootReducer =combineReducers({\r\n    weatherReducer,\r\n    alertReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport type RootState = ReturnType<typeof  rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport '../node_modules/bulma/css/bulma.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}